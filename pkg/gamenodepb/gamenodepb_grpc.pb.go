// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: pkg/gamenodepb/gamenodepb.proto

package gamenodepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameNodeClient is the client API for GameNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameNodeClient interface {
	File(ctx context.Context, opts ...grpc.CallOption) (GameNode_FileClient, error)
	Joy(ctx context.Context, opts ...grpc.CallOption) (GameNode_JoyClient, error)
	Kbd(ctx context.Context, opts ...grpc.CallOption) (GameNode_KbdClient, error)
	Snd(ctx context.Context, opts ...grpc.CallOption) (GameNode_SndClient, error)
}

type gameNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewGameNodeClient(cc grpc.ClientConnInterface) GameNodeClient {
	return &gameNodeClient{cc}
}

func (c *gameNodeClient) File(ctx context.Context, opts ...grpc.CallOption) (GameNode_FileClient, error) {
	stream, err := c.cc.NewStream(ctx, &GameNode_ServiceDesc.Streams[0], "/gamenodepb.GameNode/File", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameNodeFileClient{stream}
	return x, nil
}

type GameNode_FileClient interface {
	Send(*FileMsg) error
	Recv() (*FileMsg, error)
	grpc.ClientStream
}

type gameNodeFileClient struct {
	grpc.ClientStream
}

func (x *gameNodeFileClient) Send(m *FileMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gameNodeFileClient) Recv() (*FileMsg, error) {
	m := new(FileMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gameNodeClient) Joy(ctx context.Context, opts ...grpc.CallOption) (GameNode_JoyClient, error) {
	stream, err := c.cc.NewStream(ctx, &GameNode_ServiceDesc.Streams[1], "/gamenodepb.GameNode/Joy", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameNodeJoyClient{stream}
	return x, nil
}

type GameNode_JoyClient interface {
	Send(*JoyMsg) error
	Recv() (*JoyMsg, error)
	grpc.ClientStream
}

type gameNodeJoyClient struct {
	grpc.ClientStream
}

func (x *gameNodeJoyClient) Send(m *JoyMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gameNodeJoyClient) Recv() (*JoyMsg, error) {
	m := new(JoyMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gameNodeClient) Kbd(ctx context.Context, opts ...grpc.CallOption) (GameNode_KbdClient, error) {
	stream, err := c.cc.NewStream(ctx, &GameNode_ServiceDesc.Streams[2], "/gamenodepb.GameNode/Kbd", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameNodeKbdClient{stream}
	return x, nil
}

type GameNode_KbdClient interface {
	Send(*KbdMsg) error
	Recv() (*KbdMsg, error)
	grpc.ClientStream
}

type gameNodeKbdClient struct {
	grpc.ClientStream
}

func (x *gameNodeKbdClient) Send(m *KbdMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gameNodeKbdClient) Recv() (*KbdMsg, error) {
	m := new(KbdMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gameNodeClient) Snd(ctx context.Context, opts ...grpc.CallOption) (GameNode_SndClient, error) {
	stream, err := c.cc.NewStream(ctx, &GameNode_ServiceDesc.Streams[3], "/gamenodepb.GameNode/Snd", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameNodeSndClient{stream}
	return x, nil
}

type GameNode_SndClient interface {
	Send(*SndMsg) error
	Recv() (*SndMsg, error)
	grpc.ClientStream
}

type gameNodeSndClient struct {
	grpc.ClientStream
}

func (x *gameNodeSndClient) Send(m *SndMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gameNodeSndClient) Recv() (*SndMsg, error) {
	m := new(SndMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GameNodeServer is the server API for GameNode service.
// All implementations must embed UnimplementedGameNodeServer
// for forward compatibility
type GameNodeServer interface {
	File(GameNode_FileServer) error
	Joy(GameNode_JoyServer) error
	Kbd(GameNode_KbdServer) error
	Snd(GameNode_SndServer) error
	mustEmbedUnimplementedGameNodeServer()
}

// UnimplementedGameNodeServer must be embedded to have forward compatible implementations.
type UnimplementedGameNodeServer struct {
}

func (UnimplementedGameNodeServer) File(GameNode_FileServer) error {
	return status.Errorf(codes.Unimplemented, "method File not implemented")
}
func (UnimplementedGameNodeServer) Joy(GameNode_JoyServer) error {
	return status.Errorf(codes.Unimplemented, "method Joy not implemented")
}
func (UnimplementedGameNodeServer) Kbd(GameNode_KbdServer) error {
	return status.Errorf(codes.Unimplemented, "method Kbd not implemented")
}
func (UnimplementedGameNodeServer) Snd(GameNode_SndServer) error {
	return status.Errorf(codes.Unimplemented, "method Snd not implemented")
}
func (UnimplementedGameNodeServer) mustEmbedUnimplementedGameNodeServer() {}

// UnsafeGameNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameNodeServer will
// result in compilation errors.
type UnsafeGameNodeServer interface {
	mustEmbedUnimplementedGameNodeServer()
}

func RegisterGameNodeServer(s grpc.ServiceRegistrar, srv GameNodeServer) {
	s.RegisterService(&GameNode_ServiceDesc, srv)
}

func _GameNode_File_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GameNodeServer).File(&gameNodeFileServer{stream})
}

type GameNode_FileServer interface {
	Send(*FileMsg) error
	Recv() (*FileMsg, error)
	grpc.ServerStream
}

type gameNodeFileServer struct {
	grpc.ServerStream
}

func (x *gameNodeFileServer) Send(m *FileMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gameNodeFileServer) Recv() (*FileMsg, error) {
	m := new(FileMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GameNode_Joy_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GameNodeServer).Joy(&gameNodeJoyServer{stream})
}

type GameNode_JoyServer interface {
	Send(*JoyMsg) error
	Recv() (*JoyMsg, error)
	grpc.ServerStream
}

type gameNodeJoyServer struct {
	grpc.ServerStream
}

func (x *gameNodeJoyServer) Send(m *JoyMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gameNodeJoyServer) Recv() (*JoyMsg, error) {
	m := new(JoyMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GameNode_Kbd_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GameNodeServer).Kbd(&gameNodeKbdServer{stream})
}

type GameNode_KbdServer interface {
	Send(*KbdMsg) error
	Recv() (*KbdMsg, error)
	grpc.ServerStream
}

type gameNodeKbdServer struct {
	grpc.ServerStream
}

func (x *gameNodeKbdServer) Send(m *KbdMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gameNodeKbdServer) Recv() (*KbdMsg, error) {
	m := new(KbdMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GameNode_Snd_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GameNodeServer).Snd(&gameNodeSndServer{stream})
}

type GameNode_SndServer interface {
	Send(*SndMsg) error
	Recv() (*SndMsg, error)
	grpc.ServerStream
}

type gameNodeSndServer struct {
	grpc.ServerStream
}

func (x *gameNodeSndServer) Send(m *SndMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gameNodeSndServer) Recv() (*SndMsg, error) {
	m := new(SndMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GameNode_ServiceDesc is the grpc.ServiceDesc for GameNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gamenodepb.GameNode",
	HandlerType: (*GameNodeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "File",
			Handler:       _GameNode_File_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Joy",
			Handler:       _GameNode_Joy_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Kbd",
			Handler:       _GameNode_Kbd_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Snd",
			Handler:       _GameNode_Snd_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/gamenodepb/gamenodepb.proto",
}
